<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Turko</title>
    <link>http://localhost:57597/</link>
    <description>Recent content on Mike Turko</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>https://example.com (Mike Turko)</managingEditor>
    <webMaster>https://example.com (Mike Turko)</webMaster>
    <lastBuildDate>Thu, 06 Mar 2025 10:40:38 -0500</lastBuildDate>
    <atom:link href="http://localhost:57597/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Publisher&#39;s Retirement Might Be Your Design Wake-Up Call</title>
      <link>http://localhost:57597/post/2025/farewell-microsoft-publiser/</link>
      <pubDate>Thu, 06 Mar 2025 10:40:38 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/post/2025/farewell-microsoft-publiser/</guid>
      <description>&lt;h3 id=&#34;unveiling-the-future&#34;&gt;Unveiling The Future&lt;/h3&gt;&#xA;&lt;p&gt;In an effort to enhance user experience and introduce new features that go hand in hand with emerging trends, Microsoft occasionally discontinues services for some products. This time around it&amp;rsquo;s Microsoft Publisher that&amp;rsquo;s reaching its end of life in October 2026. However, don&amp;rsquo;t fret! As one door closes another opens - there are numerous other advanced tools within and outside the Microsoft 365 suite that offer similar functionalities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Harnessing the Power of Free Stock Photos in 2025: </title>
      <link>http://localhost:57597/post/2025/harnessing-the-power-of-free-stock-photos/</link>
      <pubDate>Fri, 28 Feb 2025 10:24:16 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/post/2025/harnessing-the-power-of-free-stock-photos/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h3 id=&#34;myth-busting&#34;&gt;Myth Busting:&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;Are AI-generated images set to replace traditional stock photos?&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>5 Simple Design Hacks to Help Non-Graphic Designers Create Professional Results</title>
      <link>http://localhost:57597/post/graphic-design/2025/five-design-hacks/</link>
      <pubDate>Sun, 09 Feb 2025 16:42:36 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/post/graphic-design/2025/five-design-hacks/</guid>
      <description>&lt;h3 id=&#34;design-smart-not-hard&#34;&gt;Design Smart, Not Hard&lt;/h3&gt;&#xA;&lt;p&gt;Creating professional visuals doesnâ€™t require years of training. Whether youâ€™re designing social posts, flyers, or slides, these five strategic hacks will help you craft polished graphics that command attention. Letâ€™s turn your DIY designs from &amp;ldquo;meh&amp;rdquo; to masterpiece.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Triathlon Time Calculator: Predict Your Race Finish</title>
      <link>http://localhost:57597/post/find-your-time/</link>
      <pubDate>Thu, 06 Feb 2025 20:02:08 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/post/find-your-time/</guid>
      <description>&lt;h3 id=&#34;unlock-your-triathlon-potential&#34;&gt;Unlock Your Triathlon Potential&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;Precision Race Time Calculator&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ready to take your triathlon training to the next level? Whether youâ€™re a seasoned Ironman veteran or a first-time Sprint competitor, my calculator helps you predict your finish time with accuracyâ€”tailored to &lt;strong&gt;your&lt;/strong&gt; pace and race distance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About us</title>
      <link>http://localhost:57597/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/page/about/</guid>
      <description>&lt;p&gt;Cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Brand Kit Generator</title>
      <link>http://localhost:57597/page/brand_kit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/page/brand_kit/</guid>
      <description>&lt;main&gt;&#xA;    &lt;div class=&#34;columns-container&#34;&gt;&#x9;&#xA;&#x9;        &lt;!-- Column 2 --&gt;&#xA;        &lt;div class=&#34;column help-column&#34;&gt;&#xA;            &lt;div class=&#34;help-card&#34;&gt;&#xA;                &lt;h3&gt;How To Use This Tool&lt;/h3&gt;&#xA;                &lt;ol&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Select a Style&lt;/strong&gt;: Choose a style that matches your brand personality&lt;/li&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Choose Background&lt;/strong&gt;: Pick light or dark background preference&lt;/li&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Generate&lt;/strong&gt;: Create your brand kit with one click&lt;/li&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Customize&lt;/strong&gt;: Regenerate specific elements as needed&lt;/li&gt;&#xA;                &lt;/ol&gt;&#xA;                &lt;p&gt;Your brand kit includes color palette, accessibility check, typography, icons, and preview examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memory Bank</title>
      <link>http://localhost:57597/page/memory_bank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/page/memory_bank/</guid>
      <description>&lt;head&gt;&#xA;  &lt;title&gt;Memory Bank Chat&lt;/title&gt;&#xA;  &lt;link rel=&#34;stylesheet&#34; href=&#34;./css/mb-styles.css&#34;&gt; &lt;!-- Optional CSS file --&gt;&#xA;  &lt;script src=&#34;https://cdn.jsdelivr.net/npm/fuse.js@6.6.2&#34;&gt;&lt;/script&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;  &lt;div class=&#34;mb-chat-container&#34;&gt;&#xA; &#xA;&#x9;&lt;!-- Toggle Button --&gt;&#xA;&#x9;&lt;button id=&#34;toggle-form-btn&#34;&gt;âž• Add New Entry&lt;/button&gt;&#x9;&#xA;&#x9;&lt;button onclick=&#34;startVoiceInput()&#34;&gt;ðŸŽ¤&lt;/button&gt;&#xA;&#xA;&#x9;   &lt;!-- Form and chat messages --&gt;&#xA; &lt;div id=&#34;entry-form&#34; class=&#34;mb-form-container&#34; style=&#34;display: none;&#34;&gt;&#xA;  &lt;div class=&#34;mb-form-content&#34;&gt;&#xA;    &lt;h2 id=&#34;form-title&#34;&gt;Add New Entry&lt;/h2&gt;&#xA;    &lt;input type=&#34;hidden&#34; id=&#34;entry-id&#34;&gt;&#xA;    &lt;div class=&#34;mb-form-field&#34;&gt;&#xA;      &lt;input type=&#34;text&#34; id=&#34;entry-title&#34; class=&#34;mb-input&#34; placeholder=&#34;Title&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;mb-form-field&#34;&gt;&#xA;  &lt;div class=&#34;input-container&#34;&gt;&#xA;    &lt;input type=&#34;text&#34; &#xA;           id=&#34;entry-category&#34; &#xA;           class=&#34;mb-input&#34; &#xA;           placeholder=&#34;Category&#34;&#xA;           autocomplete=&#34;off&#34;&gt;&#xA;    &lt;div id=&#34;category-suggestions&#34; class=&#34;suggestions&#34;&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;    &lt;div class=&#34;mb-form-field&#34;&gt;&#xA;      &lt;input type=&#34;date&#34; id=&#34;entry-date&#34; class=&#34;mb-input&#34;&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;mb-form-field&#34;&gt;&#xA;      &lt;textarea id=&#34;entry-details&#34; class=&#34;mb-input&#34; placeholder=&#34;Details&#34;&gt;&lt;/textarea&gt;&#xA;    &lt;/div&gt;&#xA;    &lt;div class=&#34;mb-form-actions&#34;&gt;&#xA;      &lt;button class=&#34;mb-primary-btn&#34; id=&#34;form-submit-btn&#34; onclick=&#34;handleFormSubmit()&#34;&gt;Save&lt;/button&gt;&#xA;      &lt;button class=&#34;mb-secondary-btn&#34; onclick=&#34;closeForm()&#34;&gt;Cancel&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&lt;/div&gt;&#xA;  &#xA;    &lt;div class=&#34;mb-chat-messages&#34; id=&#34;chat-messages&#34;&gt;&lt;/div&gt;&#xA;    &lt;div class=&#34;input-container&#34;&gt;&#xA;      &lt;input type=&#34;text&#34; id=&#34;user-input&#34; class=&#34;mb-input&#34; placeholder=&#34;Ask a question (e.g., &#39;What&#39;s my Trek bike tire size?&#39;)&#34;&gt;&#xA;      &lt;button class=&#34;mb-primary-btn&#34; onclick=&#34;handleUserInput()&#34;&gt;Send&lt;/button&gt;&#xA;    &lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;!-- Firebase and app logic --&gt;&#xA;   &lt;script src=&#34;https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;script src=&#34;https://www.gstatic.com/firebasejs/8.6.8/firebase-firestore.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;script src=&#34;./js/firebase-config.js&#34;&gt;&lt;/script&gt; &lt;!-- Firebase config --&gt;&#xA;  &lt;script src=&#34;./js/app.js&#34;&gt;&lt;/script&gt; &lt;!-- Your app logic --&gt;&#xA;&lt;/body&gt;</description>
    </item>
    <item>
      <title>Triathlon Time Calculator</title>
      <link>http://localhost:57597/page/tri_time_calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>http://localhost:57597/page/tri_time_calculator/</guid>
      <description>&lt;div class=&#34;container2&#34;&gt;&#xA;        &lt;h2&gt;Triathlon Time Calculator&lt;/h2&gt;&#xA;        &#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;raceType&#34;&gt;Select Race Type:&lt;/label&gt;&#xA;            &lt;select id=&#34;raceType&#34;&gt;&#xA;                &lt;option value=&#34;sprint&#34;&gt;Sprint Triathlon&lt;/option&gt;&#xA;                &lt;option value=&#34;olympic&#34; selected&gt;Olympic Triathlon&lt;/option&gt;&#xA;                &lt;option value=&#34;70.3&#34;&gt;70.3 Ironman&lt;/option&gt;&#xA;                &lt;option value=&#34;ironman&#34;&gt;Ironman&lt;/option&gt;&#xA;            &lt;/select&gt;&#xA;        &lt;/div&gt;&#xA;&lt;!-- Swim Input --&gt;&#xA;        &lt;div class=&#34;input-group&#34;&gt;&#xA;            &lt;label for=&#34;swim&#34;&gt;Swim Pace (per 100 yards):&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;swim&#34; placeholder=&#34;mm:ss&#34; value=&#34;2:00&#34;&gt;&#xA;            &lt;div class=&#34;time-format-example&#34;&gt;Example: 2:30 = 2 minutes 30 seconds/100y&lt;/div&gt;&#xA;            &lt;div class=&#34;event-time&#34;&gt;&#xA;                &lt;span id=&#34;swimDistance&#34;&gt;1640&lt;/span&gt; yd Swim Time: &#xA;                &lt;span id=&#34;swimTime&#34;&gt;0:00:00&lt;/span&gt;&#xA;                &lt;span class=&#34;error-message&#34; id=&#34;swimError&#34;&gt;&lt;/span&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- T1 Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;t1&#34;&gt;T1 Transition Time:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;t1&#34; placeholder=&#34;mm:ss&#34; value=&#34;2:00&#34;&gt;&#xA;            &lt;span class=&#34;error-message&#34; id=&#34;t1Error&#34;&gt;&lt;/span&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- Bike Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;bike&#34;&gt;Bike Speed (mph):&lt;/label&gt;&#xA;            &lt;input type=&#34;number&#34; id=&#34;bike&#34; step=&#34;0.1&#34; value=&#34;20.0&#34;&gt;&#xA;            &lt;div class=&#34;event-time&#34;&gt;&#xA;                &lt;span id=&#34;bikeDistance&#34;&gt;24.8&lt;/span&gt; mi Bike Time: &#xA;                &lt;span id=&#34;bikeTime&#34;&gt;0:00:00&lt;/span&gt;&#xA;                &lt;span class=&#34;error-message&#34; id=&#34;bikeError&#34;&gt;&lt;/span&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- T2 Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;t2&#34;&gt;T2 Transition Time:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;t2&#34; placeholder=&#34;mm:ss&#34; value=&#34;1:00&#34;&gt;&#xA;            &lt;span class=&#34;error-message&#34; id=&#34;t2Error&#34;&gt;&lt;/span&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- Run Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;run&#34;&gt;Run Pace (per mile):&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;run&#34; placeholder=&#34;mm:ss&#34; value=&#34;8:00&#34;&gt;&#xA;            &lt;div class=&#34;event-time&#34;&gt;&#xA;                &lt;span id=&#34;runDistance&#34;&gt;6.2&lt;/span&gt; mi Run Time: &#xA;                &lt;span id=&#34;runTime&#34;&gt;0:00:00&lt;/span&gt;&#xA;                &lt;span class=&#34;error-message&#34; id=&#34;runError&#34;&gt;&lt;/span&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;div id=&#34;result&#34;&gt;&lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;script&gt;&#xA;&#x9;&#xA;function parseTimeToMinutes(timeString, fieldName) {&#xA;        if (!timeString) return { value: 0, error: &#39;&#39; };&#xA;        &#xA;        // Decimal format detection&#xA;        if (timeString.includes(&#39;.&#39;)) {&#xA;            return { &#xA;                value: null, &#xA;                error: `Use mm:ss format instead of decimal for ${fieldName}`&#xA;            };&#xA;        }&#xA;&#xA;        const parts = timeString.split(&#39;:&#39;);&#xA;        if (parts.length &lt; 1 || parts.length &gt; 2 || &#xA;            isNaN(parts[0]) || (parts[1] &amp;&amp; isNaN(parts[1]))) {&#xA;            return { &#xA;                value: null, &#xA;                error: `Invalid ${fieldName} format (use mm:ss)`&#xA;            };&#xA;        }&#xA;        &#xA;        const minutes = parseInt(parts[0], 10);&#xA;        const seconds = parts[1] ? parseInt(parts[1], 10) : 0;&#xA;        &#xA;        if (seconds &gt;= 60) {&#xA;            return { &#xA;                value: null, &#xA;                error: `Seconds cannot exceed 59 for ${fieldName}`&#xA;            };&#xA;        }&#xA;        &#xA;        return { &#xA;            value: minutes + (seconds / 60), &#xA;            error: &#39;&#39; &#xA;        };&#xA;    }&#xA;&#xA;    const raceDistances = {&#xA;        sprint: { swim: 820, bike: 12.4, run: 3.1 },&#xA;        olympic: { swim: 1640, bike: 24.8, run: 6.2 },&#xA;        &#39;70.3&#39;: { swim: 2112, bike: 56, run: 13.1 },&#xA;        ironman: { swim: 4224, bike: 112, run: 26.2 }&#xA;    };&#xA;&#xA;    function formatTime(minutes) {&#xA;        const hours = Math.floor(minutes / 60);&#xA;        const mins = Math.floor(minutes % 60);&#xA;        const secs = Math.round((minutes * 60) % 60);&#xA;        return `${hours}:${mins.toString().padStart(2, &#39;0&#39;)}:${secs.toString().padStart(2, &#39;0&#39;)}`;&#xA;    }&#xA;&#xA;    function calculateTime() {&#xA;        // Clear previous errors&#xA;        document.querySelectorAll(&#39;.error-message&#39;).forEach(el =&gt; el.textContent = &#39;&#39;);&#xA;        document.querySelectorAll(&#39;.invalid-time&#39;).forEach(el =&gt; el.classList.remove(&#39;invalid-time&#39;));&#xA;&#xA;        // Parse all inputs with enhanced error handling&#xA;        const fields = {&#xA;            swim: parseTimeToMinutes(document.getElementById(&#39;swim&#39;).value, &#39;swim pace&#39;),&#xA;            t1: parseTimeToMinutes(document.getElementById(&#39;t1&#39;).value, &#39;T1&#39;),&#xA;            bike: {&#xA;                value: parseFloat(document.getElementById(&#39;bike&#39;).value),&#xA;                error: isNaN(parseFloat(document.getElementById(&#39;bike&#39;).value)) ? &#xA;                       &#39;Invalid bike speed&#39; : &#39;&#39;&#xA;            },&#xA;            t2: parseTimeToMinutes(document.getElementById(&#39;t2&#39;).value, &#39;T2&#39;),&#xA;            run: parseTimeToMinutes(document.getElementById(&#39;run&#39;).value, &#39;run pace&#39;)&#xA;        };&#xA;&#xA;        // Set individual error messages and collect total errors&#xA;        let totalError = &#39;&#39;;&#xA;        Object.entries(fields).forEach(([key, data]) =&gt; {&#xA;            const errorEl = document.getElementById(`${key}Error`);&#xA;            const timeEl = document.getElementById(`${key}Time`);&#xA;            &#xA;            if (data.error) {&#xA;                errorEl.textContent = data.error;&#xA;                totalError += `â€¢ ${data.error}\n`;&#xA;                if (timeEl) timeEl.classList.add(&#39;invalid-time&#39;);&#xA;            } else {&#xA;                errorEl.textContent = &#39;&#39;;&#xA;                if (timeEl) timeEl.classList.remove(&#39;invalid-time&#39;);&#xA;            }&#xA;        });&#xA;&#xA;        // Handle bike speed error separately&#xA;        if (fields.bike.error) {&#xA;            document.getElementById(&#39;bikeError&#39;).textContent = fields.bike.error;&#xA;            totalError += `â€¢ ${fields.bike.error}\n`;&#xA;        }&#xA;&#xA;        if (totalError) {&#xA;            document.getElementById(&#39;result&#39;).textContent = `Errors:\n${totalError}`;&#xA;            return;&#xA;        }&#xA;&#xA;        // Get race distances&#xA;        const raceType = document.getElementById(&#39;raceType&#39;).value;&#xA;        const distances = raceDistances[raceType];&#xA;        &#xA;        // Update displayed distances&#xA;        document.getElementById(&#39;swimDistance&#39;).textContent = distances.swim;&#xA;        document.getElementById(&#39;bikeDistance&#39;).textContent = distances.bike;&#xA;        document.getElementById(&#39;runDistance&#39;).textContent = distances.run;&#xA;&#xA;        // Calculate individual times&#xA;        const swimTime = (fields.swim.value * distances.swim) / 100;&#xA;        const bikeTime = (distances.bike / fields.bike.value) * 60;&#xA;        const runTime = fields.run.value * distances.run;&#xA;&#xA;        // Display times&#xA;        document.getElementById(&#39;swimTime&#39;).textContent = formatTime(swimTime);&#xA;        document.getElementById(&#39;bikeTime&#39;).textContent = formatTime(bikeTime);&#xA;        document.getElementById(&#39;runTime&#39;).textContent = formatTime(runTime);&#xA;&#xA;        // Calculate total time&#xA;        const totalMinutes = swimTime + fields.t1.value + bikeTime + fields.t2.value + runTime;&#xA;        document.getElementById(&#39;result&#39;).textContent = &#xA;            `Total Time (${document.getElementById(&#39;raceType&#39;).selectedOptions[0].text}): ${formatTime(totalMinutes)}`;&#xA;    }&#xA;&#xA;    // Add event listeners&#xA;    document.querySelectorAll(&#39;input, select&#39;).forEach(element =&gt; {&#xA;        element.addEventListener(&#39;input&#39;, calculateTime);&#xA;    });&#xA;&#xA;    // Initial calculation&#xA;    calculateTime();&#xA;    &lt;/script&gt;</description>
    </item>
  </channel>
</rss>
