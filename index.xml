<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mike Turko</title>
    <link>https://miketurko.com/</link>
    <description>Recent content on Mike Turko</description>
    <generator>Hugo</generator>
    <language>en</language>
    <managingEditor>https://example.com (Mike Turko)</managingEditor>
    <webMaster>https://example.com (Mike Turko)</webMaster>
    <lastBuildDate>Thu, 06 Mar 2025 10:40:38 -0500</lastBuildDate>
    <atom:link href="https://miketurko.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why Publisher&#39;s Retirement Might Be Your Design Wake-Up Call</title>
      <link>https://miketurko.com/post/2025/farewell-microsoft-publiser/</link>
      <pubDate>Thu, 06 Mar 2025 10:40:38 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/post/2025/farewell-microsoft-publiser/</guid>
      <description>&lt;h3 id=&#34;unveiling-the-future&#34;&gt;Unveiling The Future&lt;/h3&gt;&#xA;&lt;p&gt;In an effort to enhance user experience and introduce new features that go hand in hand with emerging trends, Microsoft occasionally discontinues services for some products. This time around it&amp;rsquo;s Microsoft Publisher that&amp;rsquo;s reaching its end of life in October 2026. However, don&amp;rsquo;t fret! As one door closes another opens - there are numerous other advanced tools within and outside the Microsoft 365 suite that offer similar functionalities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Harnessing the Power of Free Stock Photos in 2025: </title>
      <link>https://miketurko.com/post/2025/harnessing-the-power-of-free-stock-photos/</link>
      <pubDate>Fri, 28 Feb 2025 10:24:16 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/post/2025/harnessing-the-power-of-free-stock-photos/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h3 id=&#34;myth-busting&#34;&gt;Myth Busting:&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;Are AI-generated images set to replace traditional stock photos?&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>5 Simple Design Hacks to Help Non-Graphic Designers Create Professional Results</title>
      <link>https://miketurko.com/post/graphic-design/2025/five-design-hacks/</link>
      <pubDate>Sun, 09 Feb 2025 16:42:36 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/post/graphic-design/2025/five-design-hacks/</guid>
      <description>&lt;h3 id=&#34;design-smart-not-hard&#34;&gt;Design Smart, Not Hard&lt;/h3&gt;&#xA;&lt;p&gt;Creating professional visuals doesn’t require years of training. Whether you’re designing social posts, flyers, or slides, these five strategic hacks will help you craft polished graphics that command attention. Let’s turn your DIY designs from &amp;ldquo;meh&amp;rdquo; to masterpiece.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Triathlon Time Calculator: Predict Your Race Finish</title>
      <link>https://miketurko.com/post/find-your-time/</link>
      <pubDate>Thu, 06 Feb 2025 20:02:08 -0500</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/post/find-your-time/</guid>
      <description>&lt;h3 id=&#34;unlock-your-triathlon-potential&#34;&gt;Unlock Your Triathlon Potential&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;Precision Race Time Calculator&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ready to take your triathlon training to the next level? Whether you’re a seasoned Ironman veteran or a first-time Sprint competitor, my calculator helps you predict your finish time with accuracy—tailored to &lt;strong&gt;your&lt;/strong&gt; pace and race distance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About us</title>
      <link>https://miketurko.com/page/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/page/about/</guid>
      <description>&lt;p&gt;Cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Brand Kit Generator</title>
      <link>https://miketurko.com/page/brand_kit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/page/brand_kit/</guid>
      <description>&lt;main&gt;&#xA;&#xA;    &lt;div class=&#34;columns-container&#34;&gt;&#xA;        &lt;!-- Column 1 --&gt;&#xA;        &lt;div class=&#34;column controls-column&#34;&gt;&#xA;            &lt;section class=&#34;controls&#34;&gt;&#xA;                &lt;div class=&#34;form-group&#34;&gt;&#xA;                    &lt;label for=&#34;style&#34;&gt;Select Style&lt;/label&gt;&#xA;                    &lt;select id=&#34;style&#34;&gt;&#xA;                        &lt;option value=&#34;corporate&#34;&gt;Corporate&lt;/option&gt;&#xA;                        &lt;option value=&#34;modern&#34;&gt;Modern&lt;/option&gt;&#xA;                        &lt;option value=&#34;fun&#34;&gt;Fun&lt;/option&gt;&#xA;                        &lt;option value=&#34;wild&#34;&gt;Wild&lt;/option&gt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;option value=&#34;extraterrestrial&#34;&gt;Extraterrestrial&lt;/option&gt;&#xA;                    &lt;/select&gt;&#xA;                &lt;/div&gt;&#xA;                &#xA;                &lt;div class=&#34;form-group&#34;&gt;&#xA;                    &lt;label for=&#34;background&#34;&gt;Background Type&lt;/label&gt;&#xA;                    &lt;select id=&#34;background&#34;&gt;&#xA;                        &lt;option value=&#34;light&#34;&gt;Light&lt;/option&gt;&#xA;                        &lt;option value=&#34;dark&#34;&gt;Dark&lt;/option&gt;&#xA;                    &lt;/select&gt;&#xA;                &lt;/div&gt;&#xA;                &#xA;                &lt;button id=&#34;generate-btn&#34; class=&#34;btn-primary&#34;&gt;Generate Brand Kit&lt;/button&gt;&#xA;            &lt;/section&gt;&#xA;        &lt;/div&gt;&#xA;        &#xA;        &lt;!-- Column 2 --&gt;&#xA;        &lt;div class=&#34;column help-column&#34;&gt;&#xA;            &lt;div class=&#34;help-card&#34;&gt;&#xA;                &lt;h3&gt;How To Use This Tool&lt;/h3&gt;&#xA;                &lt;ol&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Select a Style&lt;/strong&gt;: Choose a style that matches your brand personality&lt;/li&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Choose Background&lt;/strong&gt;: Pick light or dark background preference&lt;/li&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Generate&lt;/strong&gt;: Create your brand kit with one click&lt;/li&gt;&#xA;                    &lt;li&gt;&lt;strong&gt;Customize&lt;/strong&gt;: Regenerate specific elements as needed&lt;/li&gt;&#xA;                &lt;/ol&gt;&#xA;                &lt;p&gt;Your brand kit includes color palette, accessibility check, typography, icons, and preview examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Triathlon Time Calculator</title>
      <link>https://miketurko.com/page/tri_time_calculator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>https://example.com (Mike Turko)</author>
      <guid>https://miketurko.com/page/tri_time_calculator/</guid>
      <description>&lt;div class=&#34;container2&#34;&gt;&#xA;        &lt;h2&gt;Triathlon Time Calculator&lt;/h2&gt;&#xA;        &#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;raceType&#34;&gt;Select Race Type:&lt;/label&gt;&#xA;            &lt;select id=&#34;raceType&#34;&gt;&#xA;                &lt;option value=&#34;sprint&#34;&gt;Sprint Triathlon&lt;/option&gt;&#xA;                &lt;option value=&#34;olympic&#34; selected&gt;Olympic Triathlon&lt;/option&gt;&#xA;                &lt;option value=&#34;70.3&#34;&gt;70.3 Ironman&lt;/option&gt;&#xA;                &lt;option value=&#34;ironman&#34;&gt;Ironman&lt;/option&gt;&#xA;            &lt;/select&gt;&#xA;        &lt;/div&gt;&#xA;&lt;!-- Swim Input --&gt;&#xA;        &lt;div class=&#34;input-group&#34;&gt;&#xA;            &lt;label for=&#34;swim&#34;&gt;Swim Pace (per 100 yards):&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;swim&#34; placeholder=&#34;mm:ss&#34; value=&#34;2:00&#34;&gt;&#xA;            &lt;div class=&#34;time-format-example&#34;&gt;Example: 2:30 = 2 minutes 30 seconds/100y&lt;/div&gt;&#xA;            &lt;div class=&#34;event-time&#34;&gt;&#xA;                &lt;span id=&#34;swimDistance&#34;&gt;1640&lt;/span&gt; yd Swim Time: &#xA;                &lt;span id=&#34;swimTime&#34;&gt;0:00:00&lt;/span&gt;&#xA;                &lt;span class=&#34;error-message&#34; id=&#34;swimError&#34;&gt;&lt;/span&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- T1 Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;t1&#34;&gt;T1 Transition Time:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;t1&#34; placeholder=&#34;mm:ss&#34; value=&#34;2:00&#34;&gt;&#xA;            &lt;span class=&#34;error-message&#34; id=&#34;t1Error&#34;&gt;&lt;/span&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- Bike Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;bike&#34;&gt;Bike Speed (mph):&lt;/label&gt;&#xA;            &lt;input type=&#34;number&#34; id=&#34;bike&#34; step=&#34;0.1&#34; value=&#34;20.0&#34;&gt;&#xA;            &lt;div class=&#34;event-time&#34;&gt;&#xA;                &lt;span id=&#34;bikeDistance&#34;&gt;24.8&lt;/span&gt; mi Bike Time: &#xA;                &lt;span id=&#34;bikeTime&#34;&gt;0:00:00&lt;/span&gt;&#xA;                &lt;span class=&#34;error-message&#34; id=&#34;bikeError&#34;&gt;&lt;/span&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- T2 Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;t2&#34;&gt;T2 Transition Time:&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;t2&#34; placeholder=&#34;mm:ss&#34; value=&#34;1:00&#34;&gt;&#xA;            &lt;span class=&#34;error-message&#34; id=&#34;t2Error&#34;&gt;&lt;/span&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;!-- Run Input --&gt;&#xA;        &lt;div class=&#34;input-group2&#34;&gt;&#xA;            &lt;label for=&#34;run&#34;&gt;Run Pace (per mile):&lt;/label&gt;&#xA;            &lt;input type=&#34;text&#34; id=&#34;run&#34; placeholder=&#34;mm:ss&#34; value=&#34;8:00&#34;&gt;&#xA;            &lt;div class=&#34;event-time&#34;&gt;&#xA;                &lt;span id=&#34;runDistance&#34;&gt;6.2&lt;/span&gt; mi Run Time: &#xA;                &lt;span id=&#34;runTime&#34;&gt;0:00:00&lt;/span&gt;&#xA;                &lt;span class=&#34;error-message&#34; id=&#34;runError&#34;&gt;&lt;/span&gt;&#xA;            &lt;/div&gt;&#xA;        &lt;/div&gt;&#xA;&#xA;        &lt;div id=&#34;result&#34;&gt;&lt;/div&gt;&#xA;    &lt;/div&gt;&#xA;&#xA;    &lt;script&gt;&#xA;&#x9;&#xA;function parseTimeToMinutes(timeString, fieldName) {&#xA;        if (!timeString) return { value: 0, error: &#39;&#39; };&#xA;        &#xA;        // Decimal format detection&#xA;        if (timeString.includes(&#39;.&#39;)) {&#xA;            return { &#xA;                value: null, &#xA;                error: `Use mm:ss format instead of decimal for ${fieldName}`&#xA;            };&#xA;        }&#xA;&#xA;        const parts = timeString.split(&#39;:&#39;);&#xA;        if (parts.length &lt; 1 || parts.length &gt; 2 || &#xA;            isNaN(parts[0]) || (parts[1] &amp;&amp; isNaN(parts[1]))) {&#xA;            return { &#xA;                value: null, &#xA;                error: `Invalid ${fieldName} format (use mm:ss)`&#xA;            };&#xA;        }&#xA;        &#xA;        const minutes = parseInt(parts[0], 10);&#xA;        const seconds = parts[1] ? parseInt(parts[1], 10) : 0;&#xA;        &#xA;        if (seconds &gt;= 60) {&#xA;            return { &#xA;                value: null, &#xA;                error: `Seconds cannot exceed 59 for ${fieldName}`&#xA;            };&#xA;        }&#xA;        &#xA;        return { &#xA;            value: minutes + (seconds / 60), &#xA;            error: &#39;&#39; &#xA;        };&#xA;    }&#xA;&#xA;    const raceDistances = {&#xA;        sprint: { swim: 820, bike: 12.4, run: 3.1 },&#xA;        olympic: { swim: 1640, bike: 24.8, run: 6.2 },&#xA;        &#39;70.3&#39;: { swim: 2112, bike: 56, run: 13.1 },&#xA;        ironman: { swim: 4224, bike: 112, run: 26.2 }&#xA;    };&#xA;&#xA;    function formatTime(minutes) {&#xA;        const hours = Math.floor(minutes / 60);&#xA;        const mins = Math.floor(minutes % 60);&#xA;        const secs = Math.round((minutes * 60) % 60);&#xA;        return `${hours}:${mins.toString().padStart(2, &#39;0&#39;)}:${secs.toString().padStart(2, &#39;0&#39;)}`;&#xA;    }&#xA;&#xA;    function calculateTime() {&#xA;        // Clear previous errors&#xA;        document.querySelectorAll(&#39;.error-message&#39;).forEach(el =&gt; el.textContent = &#39;&#39;);&#xA;        document.querySelectorAll(&#39;.invalid-time&#39;).forEach(el =&gt; el.classList.remove(&#39;invalid-time&#39;));&#xA;&#xA;        // Parse all inputs with enhanced error handling&#xA;        const fields = {&#xA;            swim: parseTimeToMinutes(document.getElementById(&#39;swim&#39;).value, &#39;swim pace&#39;),&#xA;            t1: parseTimeToMinutes(document.getElementById(&#39;t1&#39;).value, &#39;T1&#39;),&#xA;            bike: {&#xA;                value: parseFloat(document.getElementById(&#39;bike&#39;).value),&#xA;                error: isNaN(parseFloat(document.getElementById(&#39;bike&#39;).value)) ? &#xA;                       &#39;Invalid bike speed&#39; : &#39;&#39;&#xA;            },&#xA;            t2: parseTimeToMinutes(document.getElementById(&#39;t2&#39;).value, &#39;T2&#39;),&#xA;            run: parseTimeToMinutes(document.getElementById(&#39;run&#39;).value, &#39;run pace&#39;)&#xA;        };&#xA;&#xA;        // Set individual error messages and collect total errors&#xA;        let totalError = &#39;&#39;;&#xA;        Object.entries(fields).forEach(([key, data]) =&gt; {&#xA;            const errorEl = document.getElementById(`${key}Error`);&#xA;            const timeEl = document.getElementById(`${key}Time`);&#xA;            &#xA;            if (data.error) {&#xA;                errorEl.textContent = data.error;&#xA;                totalError += `• ${data.error}\n`;&#xA;                if (timeEl) timeEl.classList.add(&#39;invalid-time&#39;);&#xA;            } else {&#xA;                errorEl.textContent = &#39;&#39;;&#xA;                if (timeEl) timeEl.classList.remove(&#39;invalid-time&#39;);&#xA;            }&#xA;        });&#xA;&#xA;        // Handle bike speed error separately&#xA;        if (fields.bike.error) {&#xA;            document.getElementById(&#39;bikeError&#39;).textContent = fields.bike.error;&#xA;            totalError += `• ${fields.bike.error}\n`;&#xA;        }&#xA;&#xA;        if (totalError) {&#xA;            document.getElementById(&#39;result&#39;).textContent = `Errors:\n${totalError}`;&#xA;            return;&#xA;        }&#xA;&#xA;        // Get race distances&#xA;        const raceType = document.getElementById(&#39;raceType&#39;).value;&#xA;        const distances = raceDistances[raceType];&#xA;        &#xA;        // Update displayed distances&#xA;        document.getElementById(&#39;swimDistance&#39;).textContent = distances.swim;&#xA;        document.getElementById(&#39;bikeDistance&#39;).textContent = distances.bike;&#xA;        document.getElementById(&#39;runDistance&#39;).textContent = distances.run;&#xA;&#xA;        // Calculate individual times&#xA;        const swimTime = (fields.swim.value * distances.swim) / 100;&#xA;        const bikeTime = (distances.bike / fields.bike.value) * 60;&#xA;        const runTime = fields.run.value * distances.run;&#xA;&#xA;        // Display times&#xA;        document.getElementById(&#39;swimTime&#39;).textContent = formatTime(swimTime);&#xA;        document.getElementById(&#39;bikeTime&#39;).textContent = formatTime(bikeTime);&#xA;        document.getElementById(&#39;runTime&#39;).textContent = formatTime(runTime);&#xA;&#xA;        // Calculate total time&#xA;        const totalMinutes = swimTime + fields.t1.value + bikeTime + fields.t2.value + runTime;&#xA;        document.getElementById(&#39;result&#39;).textContent = &#xA;            `Total Time (${document.getElementById(&#39;raceType&#39;).selectedOptions[0].text}): ${formatTime(totalMinutes)}`;&#xA;    }&#xA;&#xA;    // Add event listeners&#xA;    document.querySelectorAll(&#39;input, select&#39;).forEach(element =&gt; {&#xA;        element.addEventListener(&#39;input&#39;, calculateTime);&#xA;    });&#xA;&#xA;    // Initial calculation&#xA;    calculateTime();&#xA;    &lt;/script&gt;</description>
    </item>
  </channel>
</rss>
